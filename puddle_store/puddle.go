/*
client level APIs implementation


*/




////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////// 

/************************************************************************************/
// dir
/************************************************************************************/










////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////// 

/************************************************************************************/
// file 
/************************************************************************************/


/*

*/
func Read(){}



func Write(){}


func Remove(){}

















////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////


/************************************************************************************/
// inode
/************************************************************************************/

type Inode struct {

	name string 
	filetype uint // file or dir
	aguid string // addr of this inode, for updating to latest version
	vguid string // addr of this version of inode, for updating to latest version
	
	
	// DIR: AGUIDs dir's children (dir entries) 
	// FILE: AGUIDS of file blocks 
	inode_addrs []string 
	size uint64 // how many of inode_addrs is valid 
}


type FileBlock struct {
	blocks[] 
}


// init, getter n setter




/*


*/
func createInode(){
	// 

	// 


}



/*

zk: {file path:AGUID}
raft: {AGUID:VGUID}
tapestry: {VGUID:data}
data: root dir inode

ZookeeperGetRoot
*/
func (p Puddlestore) getRootInode(){

	// 1. check if root znode in zookeeper

	// 2. if not, creates {file path:AGUID} mapping in zookeeper 

	// 3. zk + raft + tapestry == path -> AGUID -> VGUID -> data

}



/*

fetchByAGUID()
*/

func (p Puddlestore) getFile() {
	
	// 1.
	p.getBlobstoreData()
	
	// 2. intepret as file 
}
func (p Puddlestore) getInode()
{
	
	// 1.
	p.getBlobstoreData()
	
	// 2. intepret as inode
}
func (p Puddlestore) getBlobstoreData(){

	// 1. zk + raft + tapestry == path -> AGUID -> VGUID -> data
}






