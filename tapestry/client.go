/*
client lib to connect and CRUD a running tapestry cluster 
client is a seperate ps on a seperate cpu 



*/




type Client struct {
	Id          uint64           // Client ID, determined by the tapestry node
	node      	*t.RemoteNode // tapestry node we're connected to (also last known leader)
	
}


/*
client ps connects to an existing tapestry cluster 

*/
func Connect(){

	// 1. send "connect" request to any node



	// 2. reply logic 


}


////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////




/*
used by client to CRUD raft cluster 
sent to last known raft leader 

*/
func (client *Client) Store(){
	// 1. rpc 
}


func (client *Client) Lookup(){
	// 1. rpc 


	// 2. clean up response data 
}

func (client *Client) Get(){
	// 1. rpc 

	// 2. clean up response data 

}





