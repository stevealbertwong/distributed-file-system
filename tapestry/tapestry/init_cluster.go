/*
client lib to start and manage cluster nodes
routine functions of admining tapestry cluster





major client level APIs:

start()



*/







/*
starts a new tapestry node in tapestry cluster

raft is using grpc server, tapestry is not

*/
func CreateNode() (){
	
	// 1. init local struct, listener





	// 2. start rpc server == 1 thread listening for all types of rpc
	// unlike raft 2 threads where 1 is for raft distributed algo, follower loop, heartbeat





}



func (r *RaftNode) startRaftAlgo(){

	// 1. wait til enough nodes join the cluster 


	// 2. rpc all nodes to start raft distributed algo


	// 3. starts follower loop yourself


}


func (r *RaftNode) startFollowerLoop() {	



}


////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////


/*
create a cluster by joining 

a lot more complex than raft 
*/
func CreateLocalCluster(){




}










////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////

